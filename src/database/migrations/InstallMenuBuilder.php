<?php

/**
 * Auto Generated from Blender
 * Date: 2018/10/10 at 19:42:26 UTC +00:00
 */

use LCI\Blend\Migrations;
use LCI\Blend\Helpers\ElementProperty;
use LCI\MODX\MenuBuilder\MenuBuilder;

class InstallMenuBuilder extends Migrations
{
    /** @var array  */
    protected $systemSettings = [
        'menubuilder.rebuildOnCacheUpdate' => 1,
        'menubuilder.rebuildOnDocFormSave' => 1,
        'menubuilder.rebuildOnResourceSort' => 1,
        'menubuilder.logDebug' => 0
    ];

    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        // This will do a modx->addPackage for the menu builder custom xpdo model
        $menuBuilder = new MenuBuilder($this->modx);

        $m = $this->modx->getManager();

        // the class table object name
        $m->createObjectContainer('MbSequence');

        $snippet = $this->blender->getBlendableLoader()->getBlendableSnippet('menuBuilder');

        $snippet
            ->setSeedsDir($this->getSeedsDir())
            ->setFieldDescription('Build out menu, flush DB at first')
            ->setAsStatic('lci/modx-menubuilder/src/elements/snippets/menuBuilder.php', 'orchestrator')
            ->setFieldCategory('MenuBuilder')
            ->setElementProperty(
                (new ElementProperty("startId"))
                    ->setArea('Query')
                    ->setDescription("The starting point (Resource ID) for the menu to list documents from. Specify 0 to start from the site root.")
                    ->setValue(0)
                    ->setType('numberfield')
            )
            ->setElementProperty(
                (new ElementProperty("displayStart"))
                    ->setArea('Query')
                    ->setDescription("Show the document as referenced by &startId in the menu.")
                    ->setValue(false)
                    ->setType('combo-boolean')
            )
            ->setElementProperty(
                (new ElementProperty("level"))
                    ->setArea('Query')
                    ->setDescription("Depth (number of levels) to build the menu from. '0' goes through all levels.")
                    ->setValue(0)
                    ->setType('numberfield')
            )
            ->setElementProperty(
                (new ElementProperty("limit"))
                    ->setArea('Query')
                    ->setDescription("The limit parameter the total number of items specified")
                    ->setValue('numberfield')
            )
            ->setElementProperty(
                (new ElementProperty("limitLevelItems"))
                    ->setArea('Query')
                    ->setDescription("JSON style ex: &limitLevelItems=`{\"1\":\"5\",\"2\":\"4\"}` The name/left is the level and the right is the limit.")
            )
            ->setElementProperty(
                (new ElementProperty("resourceColumns"))
                    ->setArea('Query')
                    ->setDescription("Comma separated list of Resource columns to add to existing columns to be included for items")
                    ->setValue('id, context_key, pagetitle, longtitle, menutitle, parent, menuindex, link_attributes, template')
            )
            ->setElementProperty(
                (new ElementProperty("viewHidden"))
                    ->setArea('Query')
                    ->setDescription("(bool) Hide/Show based on the value of \"Hide From Menus\" checkbox")
                    ->setValue(false)
                    ->setType('combo-boolean')
            )
            ->setElementProperty(
                (new ElementProperty("viewUnpublished"))
                    ->setArea('Query')
                    ->setDescription("(bool)")
                    ->setValue(false)
                    ->setType('combo-boolean')
            )
            ->setElementProperty(
                (new ElementProperty("viewDeleted"))
                    ->setArea('Query')
                    ->setDescription("(bool)")
                    ->setValue(false)
                    ->setType('combo-boolean')
            )
            ->setElementProperty(
                (new ElementProperty("placeholder"))
                    ->setArea('Output')
                    ->setDescription("Name of a placeholder to send results to, instead of directly returning the output.")
                    ->setValue('')
            )
            ->setElementProperty(
                (new ElementProperty("debug"))
                    ->setArea('Debug')
                    ->setDescription("(bool) Set to '1' to enable debug mode for extra troubleshooting.")
                    ->setValue(false)
                    ->setType('combo-boolean')
            )
            ->setElementProperty(
                (new ElementProperty("debugSql"))
                    ->setArea('Debug')
                    ->setDescription("(bool) Will output the SQL that is generated by your property settings")
                    ->setValue(false)
                    ->setType('combo-boolean')
            )
            ->setElementProperty(
                (new ElementProperty("iterateType"))
                    ->setArea('Query')
                    ->setDescription("getIterator or PDO")
                    ->setValue('getIterator')
            )
            ->setElementProperty(
                (new ElementProperty("where"))
                    ->setArea('Query')
                    ->setDescription("JSON style filtering option. For example when trying to hide blog or news from the Articles addon: &where=[{\"class_key:!=\": \"Article\"}]")
                    ->setValue('')
            )
            ->setElementProperty(
                (new ElementProperty("contexts"))
                    ->setArea('Query')
                    ->setDescription("Comma separated list of Context_keys to use for building the menu.")
                    ->setValue('')
            )
            ->setElementProperty(
                (new ElementProperty("scheme"))
                    ->setArea('URLs')
                    ->setDescription("Format for how URLs are generated.")
                    ->setValue('')
            )
            ->setElementProperty(
                (new ElementProperty("rawTVs"))
                    ->setArea('Query')
                    ->setDescription("Comma separated list of TVs to include you will then use like: [[+tvMainImage]], the first letter of the name will be made uppercase")
                    ->setValue('')
            )
            ->setElementProperty(
                (new ElementProperty("processTvs"))
                    ->setArea('Query')
                    ->setDescription("Comma separated list of TVs to process include you will then use like: [[+tvMainImage]], the first letter of the name will be made uppercase. Note: the iterateType property must be set to getIterator")
                    ->setValue('')
            )
            ->setElementProperty(
                (new ElementProperty("hereClass"))
                    ->setArea('CSS')
                    ->setDescription("CSS class passed to all resource items in current/active branch, showing where you are located.")
                    ->setValue('active')
            )
            ->setElementProperty(
                (new ElementProperty("selfClass"))
                    ->setArea('CSS')
                    ->setDescription("CSS class passed only to the current resource/item.")
                    ->setValue('')
            );

        if ($snippet->blend(true)) {
            $this->blender->out('MenuBuilder snippet was created successfully!');
        } else {
            $this->blender->outError('MenuBuilder snippet was not created successfully!');
        }

        // Plugin
        $plugin = $this->blender->getBlendableLoader()->getBlendablePlugin('buildMenuSequence');

        $plugin
            ->setSeedsDir($this->getSeedsDir())
            ->setFieldDescription('MenuBuilder Plugin that saves the sequence of the resources')
            ->setAsStatic('lci/modx-menubuilder/src/elements/plugins/buildMenuSequence.php', 'orchestrator')
            ->setFieldCategory('MenuBuilder')
            ->attachOnEvent('OnCacheUpdate')
            ->attachOnEvent('OnResourceSort')
            ->attachOnEvent('OnDocFormSave')
        ;

        if ($plugin->blend(true)) {
            $this->blender->out('MenuBuilder plugin was created successfully!');
        } else {
            $this->blender->outError('MenuBuilder plugin was not created successfully!');
        }

        // Namespace to attach system settings to
        $menuBuilderNameSpace = $this->modx->getObject('modNamespace', 'MenuBuilder');

        if (!$menuBuilderNameSpace) {
            /** @var \modNamespace $menuBuilderNameSpace */
            $menuBuilderNameSpace = $this->modx->newObject('modNamespace');
            $menuBuilderNameSpace->set('name', 'MenuBuilder');
            $menuBuilderNameSpace->set('path', '{core_path}vendor/');
            $menuBuilderNameSpace->set('assets_path', '{assets_path}menubuilder/');

            if ($menuBuilderNameSpace->save()) {
                $this->blender->outSuccess('The modNamespace MenuBuilder has been created');
            } else {
                $this->blender->out('The modNamespace MenuBuilder was not created', true);
            }
        }

        foreach ($this->systemSettings as $systemSetting => $value) {
            $blendableSetting = $this->blender->getBlendableLoader()->getBlendableSystemSetting($systemSetting);
            $blendableSetting
                ->setSeedsDir($this->getSeedsDir())
                ->setFieldNamespace('MenuBuilder')
                ->setFieldArea('MenuBuilder')
                ->setFieldXType('combo-boolean')
                ->setFieldValue($value);

            if ($blendableSetting->blend(true)) {
                $this->blender->out('MenuBuilder system setting ' . $systemSetting . ' was created successfully!');
            } else {
                $this->blender->outError('MenuBuilder system setting ' . $systemSetting . ' was not created successfully!');
            }
        }

    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        $menuBuilder = new MenuBuilder($this->modx);

        $m = $this->modx->getManager();

        // the class table object name
        $m->removeObjectContainer('MbSequence');

        $snippet = $this->blender->getBlendableLoader()->getBlendableSnippet('menuBuilder');

        if ($snippet->revertBlend()) {
            $this->blender->out('MenuBuilder snippet was reverted successfully!');
        } else {
            $this->blender->outError('MenuBuilder snippet was not successfully reverted!');
        }

        $plugin = $this->blender->getBlendableLoader()->getBlendablePlugin('buildMenuSequence');

        if ($plugin->revertBlend()) {
            $this->blender->out('MenuBuilder plugin was reverted successfully!');
        } else {
            $this->blender->outError('MenuBuilder plugin was not reverted successfully!');
        }

        $menuBuilderNameSpace = $this->modx->getObject('modNamespace', 'MenuBuilder');

        if (is_object($menuBuilderNameSpace)) {
            $menuBuilderNameSpace->remove();
        }

        foreach ($this->systemSettings as $systemSetting => $value) {
            $blendableSetting = $this->blender->getBlendableLoader()->getBlendableSystemSetting($systemSetting);

            if ($blendableSetting->revertBlend()) {
                $this->blender->out('MenuBuilder system setting ' . $systemSetting . ' was reverted successfully!');
            } else {
                $this->blender->outError('MenuBuilder system setting ' . $systemSetting . ' was not reverted successfully!');
            }
        }
    }

    /**
     * Method is called on construct, please fill me in
     */
    protected function assignDescription()
    {
        $this->description = 'Installs MenuBuilder snippet, buildMenuSequence plugin and related system settings.';
    }

    /**
     * Method is called on construct, please fill me in
     */
    protected function assignVersion()
    {
        $this->version = 'v1.0.0-beta';
    }

    /**
     * Method is called on construct, can change to only run this migration for those types
     */
    protected function assignType()
    {
        $this->type = 'master';
    }

    /**
     * Method is called on construct, Child class can override and implement this
     */
    protected function assignSeedsDir()
    {
        $this->seeds_dir = 'InstallMenuBuilder';
    }
}